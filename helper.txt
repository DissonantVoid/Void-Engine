								-#-#-#-#-#-#-#-#-#- HELPER -#-#-#-#-#-#-#-#-#-

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#~TODO~#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Current Objectives: FIX THE SYNTAX MESS AT GameScene.cpp!!!.  built in entities(audioCanvas,particles,tileMap)

ENGINE:
	DESIGN:
		-in the tile map there should be a tile base class so player can costumize his own tiles
		-animated text
		-add copyResource(string name,string newName) func in all resource handlers, this should copy the resource with 'name' into a new resource with name 'newName'
		-fix the horrible long syntax
		-void splash scene that run at the begining of the game and can be disabled
		-threaded input handling, rendering... (learn mutex & conditional variables)
		-make code more professional: provide or delete copy constructors when needed, replace the long init with a shortcut ex(#using game::init() Game), use smart pointers, mark as inline when needed...
		-some warning logs should be errors
		-engine optimization ex: renderer culling(sprites wont be drawn if out of screen), 
		-forgot to check if the resource is nullptr for all functions that takes a "new" pointer
		-entities parent-child system, could be beneficial, for science ?
		-use minimum heap allocations (https://stackoverflow.com/questions/2264969)

	BUGS:
		-try to break the game engine: 
			draw layer bigger than the max

	PROFILING:
		-events are commonly used all the time, the eventHandler construct bunch of events and send them every frame, optimize events by maybe make them in a union

CLIENT:
	DESIGN:
	-particles system

	BUGS:

OTHER:
	-build the engine as a dll(to get more familiar with the pressecc) and as static library(get more familiar with configs like VENGINE_STATIC etc...)
	-use github
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

			# MAIN GOAL: #
-a basic game engine that can be used to eliminate the need of recreating all basic components everytime I create new game project
-challenges to complete:
	-Tetris
	-packman
	-snake
	-xo with ai
	-sudoku solver
	-teather toother eater oother
	-evolution sim

			# HOW TO USE: #
-put all engine files (files of this project) in a folder in your project
-include "VoidEngine.h" and inherite from the "Game" class
-to make a costum scene make a scene class that inherits from "VEngine::Scene" class and submite it to "VEngine::SceneHandler"
	-make sure to call start() update() for the entities
-to make an entity simply inherite from the entity() base class

			# ENGINE STRUCTURE: #
#resource handling
#rendering
#logging 
#input
#scene system
entities
GUI

costumizable events that gets handled by the active scene
engine access: get fps etc...
utilities